===============
GSLevel Grammar
===============

alias(key, value)
define(key, value)
include(filename)

init(name, description, id, ki)
scale(factor)
setview(width, height, {x, y})
setwrap(mode)
config(identifier, value)

cannon  (size, player, {x, y}, [rotation], [id: cannonid])
laser   (size, player, {x, y}, [rotation], [id: cannonid])
minigun (size, player, {x, y}, [rotation], [id: cannonid])
shielder(size, player, {x, y}, [rotation], [id: cannonid])
relay   (size, player, {x, y}, [rotation], [id: cannonid])
trishot (size, player, {x, y}, [rotation], [id: cannonid])

voidwall({x, y}, {x, y}, [trim_start: trim1], [trim_end: trim2], [offset: {offx, offy}], [rot: rotation], [normal_offset: noff])
voidwall_h({x, y}, length)
voidwall_v({x, y}, length)
voidwall_r({x, y}, length, rotation)
voidcircle({x, y}, diameter)

glasswall({x, y}, {x, y}, [trim_start: trim1], [trim_end: trim2], [offset: {offx, offy}], [rot: rotation], [width: width], [normal_offset: noff])
glasswall_h({x, y}, length)
glasswall_v({x, y}, length)
glasswall_r({x, y}, length, rotation)
glassblock({x, y}, width, height, [rotation])

mirrorwall({x, y}, {x, y}, [trim_start: trim1], [trim_end: trim2], [offset: {offx, offy}], [rot: rotation], [width: width], [normal_offset: noff])
mirrorwall_h({x, y}, length)
mirrorwall_v({x, y}, length)
mirrorwall_r({x, y}, length, rotation)
mirrorblock({x, y}, width, height, [rotation])
mirrorcircle({x, y}, diameter)

blackhole({x, y}, diameter, [power])
whitehole({x, y}, diameter, [power])

portal(group, side, {x, y}, length, normal)

text({x, y}, width, height, text, [options], [rotation])


===============
GSGraph Grammar
===============

alias(key, value)
define(key, value)
include(filename)
scale(factor)

node({x, y}, levelid)
root({x, y}, worldid)
warp({x, y}, worldid)

connect(id, orientation<auto|lin|cw|ccw>, [priority])
